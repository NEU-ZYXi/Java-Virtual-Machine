
1. 概述
  由于CPU运算速度与存储、I/O读写、网络通讯等系统的速度差距，需要进行多任务处理以充分利用CPU资源
  每秒事务处理数Transactions Per Second, TPS是衡量一个服务性能高低的指标之一，代表一秒内服务端平均能响应的请求总数
  
2. 硬件的效率与一致性
  高速缓存Cache作为内存与处理器之间的缓冲，读写速度接近处理器运算速度，将运算需要的数据复制到缓存中，运算结束后再从缓存中同步回内存中
  多核CPU中，每个CPU都有独立的高速缓存，它们共享同一个主内存Main Memory，采用一些协议来保证缓存一致性Cache Coherence，并且采用乱序执行Out-Of-Order Execution进行优化，不能保证代码的先后顺序
  
3. Java内存模型
  Java内存模型Java Memory Model, JMM用于实现Java程序在各个平台下都能达到一致的并发效果
  1. 主内存与工作内存
    JMM规定所有变量（不包括局部变量和方法）都存储在主内存Main Memory中
    每个线程有单独的工作内存Working Memory，保存该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作都必须在工作内存中进行，线程间变量值的传递通过主内存完成
  2. 内存间交互操作
    关于主内存与工作内存之间的交互，JMM定义了八种操作
      1. 锁定lock：作用于主内存的变量，将该变量标识为一个线程独占的状态
      2. 解锁unlock：作用于主内存的变量，将一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定
      3. 读取read：作用于主内存的变量，将一个变量的值从主内存传输到线程的工作内存中
      4. 载入load：作用于工作内存的变量，把read操作中的变量值放入工作内存中的变量副本
      5. 使用use：作用于工作内存的变量，将一个变量的值传递给执行引擎，每当虚拟机接到一个需要使用该变量的字节码指令时都会执行该操作
      6. 赋值assign：作用于工作内存的变量，把一个从执行引擎接收到的值赋值给工作内存的变量
      7. 存储store：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中
      8. 写入write：作用于主内存的变量，将write操作得到的变量的值放入主内存中的变量
  3. 原子性、可见性和有序性
    1. 原子性Atomicity
      基本数据类型的访问读写具有原子性，lock和unlock操作通过synchronized关键字实现
    2. 可见性Visibility
      指当一个线程修改了共享变量的值，其他线程能立即得知这个修改
      使用volatile、synchronized和final关键字
    3. 有序性Ordering
      线程内表现为串行的语义，由于指令重排序和工作内存与主内存同步延迟，对于一个线程，其他线程内的操作都是无序的
      使用volatile、synchronized关键字
  4. volatile关键字
    当一个变量被volatile修饰后，该变量对所有线程可见，即当一个线程修改了该变量的值，其他线程可以立刻得知而不需要通过主内存完成
    volatile保证可见性visibility，对于运算结果依赖变量当前值、变量需要与其他的状态变量共同参与不变约束的两种情况，不能保证原子性atomicity
    volatile禁止指令重排序优化，也是JMM中的线程内表现为串行Within-Thread As-If-Serial语义
  5. 先行发生原则Happens-before
    



