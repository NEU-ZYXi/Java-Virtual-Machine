
1. 线程安全
  当多个线程访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步或其他协调操作，调用这个对象的行为都可以获得正确的结果，则该对象是线程安全的
  1. Java语言中的线程安全
    按照线程安全的安全程度，将Java语言中各种操作共享的数据分为不可变、绝对线程安全、相对线程安全、线程兼容和线程对立
    1. 不可变immutable
      不可变的对象一定是线程安全的，对象的方法实现和方法的调用都不需要进行任何线程安全的保障措施
      对于基本数据类型，使用final关键字
    2. 绝对线程安全
      不管运行时环境如何，调用者都不需要任何额外的同步措施
    3. 相对线程安全
      保证对某个对象单独的操作是线程安全的，但对于某些连续调用，可能需要调用端额外的同步措施
      例如Vector、HashTable等
    4. 线程兼容
      对象本身不是线程安全的，但可以在调用端使用同步措施来保证对象可以在并发环境下安全使用
      例如Vector、ArrayList、HashMap等
    5. 线程对立
      不管调用端是否采取同步措施，都不能在多线程环境中并发使用
  2. 线程安全的实现方法
    1. 互斥同步Mutual Exclusion and Synchronization
      同步指在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一个线程使用
      互斥是实现同步的一种手段，包括临界区Critical Section、互斥量Mutex和信号量Semaphore
    2. 
      synchronized关键字是基本的互斥同步手段，被修饰编译后，同步块前后产生monitorenter和monitorexit字节码指令，需要一个reference类型的参数来指定要锁定和解锁的对象，零值为对应的对象实例或Class对象
      





