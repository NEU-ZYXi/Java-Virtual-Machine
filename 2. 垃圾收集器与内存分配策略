
1. 概述
  Program Counter Register，VM Stack和Native Method Stack随线程而生，随线程而灭，因此内存分配和回收都具有确定性
  Stack和Method Area只有在程序处于运行期间才知道要创建哪些对象实例，这部分内存的分配和回收是动态的

2. 判断对象是否存活
  1. 引用计数算法Reference Counting
    给对象中添加一个引用计数器，每当有一个地方引用它时，计数器加1，引用失效时，计数器减1，则任何时刻计数器为0的对象代表已不存活
    实现简单，判定效率高，无法解决对象之间的相互循环引用的问题
  2. 根搜索算法GC Roots Tracing
    通过一系列名为GC Roots的对象作为起始点，向下搜索，路径成为引用链Reference Chain，当从GC Roots到一个对象不可达时，则该对象不可用
    GC Roots对象包括VM Stack（栈帧中的本地变量表）中引用的对象、Method Area中类静态属性引用的对象和Method Area中常量引用的对象
  3. 引用类型
    强引用Strong Reference > 软引用Soft Reference > 弱引用Weak Reference > 虚引用Phantom Reference
  4. Method Area区的垃圾回收
    主要回收废弃常量和无用的类
    废弃常量：存在在常量池中，但没有被任何对象引用
    无用的类：该类所有的实例都已经被回收，加载该类的ClassLoader已经被回收，该类对应的java.lang.Class对象没有在任何地方被引用
    
3. 垃圾回收算法
  1. 标记-清除算法Mark-Sweep
    首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象
    标记和清除过程的效率不高，回收后产生大量不连续的内存碎片阻碍后续较大对象的内存分配
  2. 复制算法Copying
    将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完后，将仍然存活着的对象复制到另外一块上，再将之前已使用过的内存空间一次清理掉
    用于回收新生代（存活时间不长），对于HotSpot虚拟机，将内存分为Eden空间和两块Survivor空间（大小8:1），每次使用Eden和一块Survivor，回收时将Eden和Survivor中存活的对象拷贝到另一块Survivor上，再清理掉Eden和第一块Survivor
  3. 标记-整理算法Mark-Compact
    标记后将所有存活的对象向一端移动进行整理，再将端边界以外的内存清除，用于老年代（存活时间很长）
  4. 分代收集算法Generational Collection
    根据对象的存活周期的不同将内存划分为几块，并根据各自特点使用适合的收集算法
    
4. 垃圾收集器    
  1. Serial收集器
    用于新生代收集，单线程收集器，在进行垃圾收集时，必须暂停其他所有工作线程
    简单而高效，用于运行在Client模式下的虚拟机中作为新生代收集器
  2. ParNew收集器
    Serial收集器的多线程版本，用于运行在Server模式下的虚拟机中作为新生代收集器
  3. Parallel Scavenge收集器
    新生代收集器，使用复制算法，支持并行Parellel的多线程收集器，目标是达到一个可控制的吞吐量Throughput，高吞吐量可以最高效率利用CPU时间，适合后台运算而不需要太多交互任务
    提供MaxGCPauseMillis和GCTimeRatio参数用于控制吞吐量
  4. Serial Old收集器
    Serial收集器的老年代版本，单线程收集器，使用标记-整理算法
  5. Parellel Old收集器
    Parellel Scavenge收集器的老年代版本，多线程收集器，使用标记-整理算法
  6. CMS(Concurrent Mark Sweep)收集器
    是一种以获取最短回收停顿时间为目标的收集器，重视服务的响应速度，使用标记-清除算法
    分为4个步骤：初始标记initial mark、并发标记concurrent mark、重新标记remark和并发清除concurrent sweep，其中initial mark和remark需要暂停其他所有工作线程
    有3个缺点：对CPU资源非常敏感、无法处理浮动垃圾Floating Garbage即并发清除过程中产生的新的垃圾、标记-清除算法产生大量空间碎片
  7. G1收集器
    使用标记-整理算法，可以精确控制停顿时间
    
5. 内存分配与回收策略
  对于HotSpot虚拟机，对象优先在新生代Eden区分配
  当Eden区没有足够的空间进行分配时，虚拟机将发起一次在新生代的垃圾回收Minor GC
  大对象即需要大量连续内存空间的对象，直接进入老年代，避免在Eden区和两个Survivor区之间发生大量内存拷贝
  长期存活的对象通过一个对象年龄计数器来控制，当年龄增加到一定程度，进入老年代
  当进入老年代的对象大小大于剩余空间时，进行一次老年代的垃圾回收Full GC
  
  
    
